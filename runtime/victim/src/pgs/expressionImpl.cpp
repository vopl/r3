#include "stdafx.h"
#include "expressionImpl.hpp"
#include "expressionAccess.hpp"

namespace pgs
{
	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl::ExpressionImpl()
	{
	}

// 	//////////////////////////////////////////////////////////////////////////
// 	void ExpressionImpl::mkSql(std::string &result)
// 	{
// 		assert(0);
// 		result += "[[[ ExpressionImpl::mkSql ]]]";
// 	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_list::ExpressionImpl_list()
	{

	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_list::~ExpressionImpl_list()
	{

	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_list::push(const Expression &a)
	{
		_list.push_back(ExpressionAccess(a));
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_list::reg(StatementImpl *s)
	{
		for(size_t i(0); i<_list.size(); i++)
		{
			_list[i]->reg(s);
		}
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_list::mkSql(std::string &result)
	{
		for(size_t i(0); i<_list.size(); i++)
		{
			if(i)
			{
				result += ",";
			}
			_list[i]->mkSql(result);
		}
	}


	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_op0::ExpressionImpl_op0(const char *name)
		: _name(name)
	{

	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_op0::~ExpressionImpl_op0()
	{

	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_op0::reg(StatementImpl *s)
	{

	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_op0::mkSql(std::string &result)
	{
		result += _name;
	}


	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_op1::ExpressionImpl_op1(const char *name, const Expression &a, bool isPre)
		: _name(name)
		, _a(ExpressionAccess(a))
		, _isPre(isPre)
	{
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_op1::~ExpressionImpl_op1()
	{
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_op1::reg(StatementImpl *s)
	{
		_a->reg(s);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_op1::mkSql(std::string &result)
	{
		assert(!__FUNCTION__);
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_op2::ExpressionImpl_op2(const char *name, const Expression &a, const Expression &b)
		: _name(name)
		, _a(ExpressionAccess(a))
		, _b(ExpressionAccess(b))
	{
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_op2::~ExpressionImpl_op2()
	{
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_op2::reg(StatementImpl *s)
	{
		_a->reg(s);
		_b->reg(s);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_op2::mkSql(std::string &result)
	{
		result += "(";
		_a->mkSql(result);
		result += _name;
		_b->mkSql(result);
		result += ")";
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_op3::ExpressionImpl_op3(const char *name1, const char *name2, const Expression &a, const Expression &b, const Expression &c)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_op3::~ExpressionImpl_op3()
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_op3::reg(StatementImpl *s)
	{
// 		_a->reg(s);
// 		_b->reg(s);
// 		_c->reg(s);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_op3::mkSql(std::string &result)
	{
		assert(!__FUNCTION__);
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_func::ExpressionImpl_func(const char *name)
		: _name(name)
	{
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_func::~ExpressionImpl_func()
	{
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_func::pushArg(const Expression &a)
	{
		_args.push_back(ExpressionAccess(a));
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_func::reg(StatementImpl *s)
	{
		for(size_t i(0); i<_args.size(); i++)
		{
			_args[i]->reg(s);
		}
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_func::mkSql(std::string &result)
	{
		result += _name;
		result += "(";
		for(size_t i(0); i<_args.size(); i++)
		{
			if(i)
			{
				result += ",";
			}
			_args[i]->mkSql(result);
		}
		result += ")";
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_casec::ExpressionImpl_casec()
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_casec::~ExpressionImpl_casec()
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_casec::pushPair(const Expression &c, const Expression &r)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_casec::pushElse(const Expression &e)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_casec::reg(StatementImpl *s)
	{
		assert(0);
		//_args[i]->reg(s);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_casec::mkSql(std::string &result)
	{
		assert(!__FUNCTION__);
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_casee::ExpressionImpl_casee(const Expression &e)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	ExpressionImpl_casee::~ExpressionImpl_casee()
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_casee::pushPair(const Expression &v, const Expression &r)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_casee::pushElse(const Expression &e)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_casee::reg(StatementImpl *s)
	{
		//_args[i]->reg(s);
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExpressionImpl_casee::mkSql(std::string &result)
	{
		assert(!__FUNCTION__);
	}

}
