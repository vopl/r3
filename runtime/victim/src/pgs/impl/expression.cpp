#include "stdafx.h"
#include "expression.hpp"
#include "access.hpp"

namespace pgs
{
	namespace impl
	{
		//////////////////////////////////////////////////////////////////////////
		Expression::Expression()
		{
		}
		//////////////////////////////////////////////////////////////////////////
		Expression_list::Expression_list()
		{

		}

		//////////////////////////////////////////////////////////////////////////
		Expression_list::~Expression_list()
		{

		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_list::push(const pgs::Expression &a)
		{
			_list.push_back(Access<pgs::Expression>(a));
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_list::reg(Statement *s)
		{
			for(size_t i(0); i<_list.size(); i++)
			{
				_list[i]->reg(s);
			}
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_list::mkSql(std::string &result)
		{
			for(size_t i(0); i<_list.size(); i++)
			{
				if(i)
				{
					result += ",";
				}
				_list[i]->mkSql(result);
			}
		}


		//////////////////////////////////////////////////////////////////////////
		Expression_op0::Expression_op0(const char *name)
			: _name(name)
		{

		}

		//////////////////////////////////////////////////////////////////////////
		Expression_op0::~Expression_op0()
		{

		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_op0::reg(Statement *s)
		{

		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_op0::mkSql(std::string &result)
		{
			result += _name;
		}


		//////////////////////////////////////////////////////////////////////////
		Expression_op1::Expression_op1(const char *name, const pgs::Expression &a, bool isPre)
			: _name(name)
			, _a(Access<pgs::Expression>(a))
			, _isPre(isPre)
		{
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_op1::~Expression_op1()
		{
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_op1::reg(Statement *s)
		{
			_a->reg(s);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_op1::mkSql(std::string &result)
		{
			assert(!__FUNCTION__);
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_op2::Expression_op2(const char *name, const pgs::Expression &a, const pgs::Expression &b)
			: _name(name)
			, _a(Access<pgs::Expression>(a))
			, _b(Access<pgs::Expression>(b))
		{
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_op2::~Expression_op2()
		{
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_op2::reg(Statement *s)
		{
			_a->reg(s);
			_b->reg(s);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_op2::mkSql(std::string &result)
		{
			result += "(";
			_a->mkSql(result);
			result += _name;
			_b->mkSql(result);
			result += ")";
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_op3::Expression_op3(const char *name1, const char *name2, const pgs::Expression &a, const pgs::Expression &b, const pgs::Expression &c)
		{
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_op3::~Expression_op3()
		{
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_op3::reg(Statement *s)
		{
	// 		_a->reg(s);
	// 		_b->reg(s);
	// 		_c->reg(s);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_op3::mkSql(std::string &result)
		{
			assert(!__FUNCTION__);
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_func::Expression_func(const char *name)
			: _name(name)
		{
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_func::~Expression_func()
		{
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_func::pushArg(const pgs::Expression &a)
		{
			_args.push_back(Access<pgs::Expression>(a));
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_func::reg(Statement *s)
		{
			for(size_t i(0); i<_args.size(); i++)
			{
				_args[i]->reg(s);
			}
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_func::mkSql(std::string &result)
		{
			result += _name;
			result += "(";
			for(size_t i(0); i<_args.size(); i++)
			{
				if(i)
				{
					result += ",";
				}
				_args[i]->mkSql(result);
			}
			result += ")";
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_casec::Expression_casec()
		{
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_casec::~Expression_casec()
		{
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_casec::pushPair(const pgs::Expression &c, const pgs::Expression &r)
		{
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_casec::pushElse(const pgs::Expression &e)
		{
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_casec::reg(Statement *s)
		{
			assert(0);
			//_args[i]->reg(s);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_casec::mkSql(std::string &result)
		{
			assert(!__FUNCTION__);
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_casee::Expression_casee(const pgs::Expression &e)
		{
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		Expression_casee::~Expression_casee()
		{
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_casee::pushPair(const pgs::Expression &v, const pgs::Expression &r)
		{
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_casee::pushElse(const pgs::Expression &e)
		{
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_casee::reg(Statement *s)
		{
			//_args[i]->reg(s);
			assert(0);
		}

		//////////////////////////////////////////////////////////////////////////
		void Expression_casee::mkSql(std::string &result)
		{
			assert(!__FUNCTION__);
		}
	}
}
