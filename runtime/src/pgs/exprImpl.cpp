#include "exprImpl.hpp"

namespace pgs
{
	//////////////////////////////////////////////////////////////////////////
	ExprImpl::ExprImpl()
	{
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl::mkSql(std::string &result)
	{
		assert(0);
		result += "[[[ ExprImpl::mkSql ]]]";
	}


	//////////////////////////////////////////////////////////////////////////
	ExprImpl_op1::ExprImpl_op1(const char *name, const Expr &a, bool isPre)
		: _name(name)
		, _a(a)
		, _isPre(isPre)
	{
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_op1::~ExprImpl_op1()
	{
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_op1::mkSql(std::string &result)
	{
		assert(!__FUNCTION__);
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_op2::ExprImpl_op2(const char *name, const Expr &a, const Expr &b)
		: _name(name)
		, _a(a)
		, _b(b)
	{
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_op2::~ExprImpl_op2()
	{
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_op2::mkSql(std::string &result)
	{
		result += "(";
		_a.mkSql(result);
		result += _name;
		_b.mkSql(result);
		result += ")";
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_op3::ExprImpl_op3(const char *name1, const char *name2, const Expr &a, const Expr &b, const Expr &c)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_op3::~ExprImpl_op3()
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_op3::mkSql(std::string &result)
	{
		assert(!__FUNCTION__);
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_func::ExprImpl_func(const char *name)
		: _name(name)
	{
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_func::~ExprImpl_func()
	{
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_func::pushArg(const Expr &a)
	{
		_args.push_back(a);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_func::mkSql(std::string &result)
	{
		result += _name;
		result += "(";
		for(size_t i(0); i<_args.size(); i++)
		{
			if(i)
			{
				result += ",";
			}
			_args[i].mkSql(result);
		}
		result += ")";
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_casec::ExprImpl_casec()
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_casec::~ExprImpl_casec()
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_casec::pushPair(const Expr &c, const Expr &r)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_casec::pushElse(const Expr &e)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_casec::mkSql(std::string &result)
	{
		assert(!__FUNCTION__);
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_casee::ExprImpl_casee(const Expr &e)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	ExprImpl_casee::~ExprImpl_casee()
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_casee::pushPair(const Expr &v, const Expr &r)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_casee::pushElse(const Expr &e)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	void ExprImpl_casee::mkSql(std::string &result)
	{
		assert(!__FUNCTION__);
	}

}
