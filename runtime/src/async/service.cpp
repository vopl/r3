#include "pch.h"
#include "async/service.hpp"
#include "serviceImpl.hpp"

namespace async
{
	//////////////////////////////////////////////////////////////////////////
	Service::Service()
	{

	}

	//////////////////////////////////////////////////////////////////////////
	Service::Service(const Service&)
	{

	}

	//////////////////////////////////////////////////////////////////////////
	Service::~Service()
	{

	}

	//////////////////////////////////////////////////////////////////////////
	void Service::start(
		size_t numThreads,
		const boost::function<void ()> &onThreadStart,
		const boost::function<void ()> &onThreadStop)
	{
		static_cast<ServiceImpl *>(this)->start(numThreads, onThreadStart, onThreadStop);
	}

	//////////////////////////////////////////////////////////////////////////
	void Service::balance(size_t numThreads)
	{
		static_cast<ServiceImpl *>(this)->balance(numThreads);
	}

	//////////////////////////////////////////////////////////////////////////
	void Service::stop()
	{
		static_cast<ServiceImpl *>(this)->stop();
	}






	//////////////////////////////////////////////////////////////////////////
	ASYNC_API ServicePtr createService()
	{
		assert(0);
		return ServicePtr();
	}

	//////////////////////////////////////////////////////////////////////////
	ASYNC_API void spawn(const boost::function<void ()> &code)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	ASYNC_API void exec(const boost::function<void ()> &code)
	{
		assert(0);
	}

	//////////////////////////////////////////////////////////////////////////
	ASYNC_API boost::asio::io_service &io()
	{
		assert(0);
		static boost::asio::io_service res;
		return res;
	}

	//////////////////////////////////////////////////////////////////////////
	ASYNC_API ServicePtr service()
	{
		assert(0);
		return ServicePtr();
	}

}

